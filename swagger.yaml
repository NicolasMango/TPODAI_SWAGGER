openapi: 3.0.3
info:
  title: Swagger TPO DAI - Sistema de gestion barrial
  description: |-
    TPO realizado para la materia Desarrollo de Aplicaciones 1 
    -
    GRUPO 7 - TURNO MAÑANA
    -
    - INTEGRANTES :
      - CIOFFI SEBASTIÁN
      - DE BRITO JUAN ANTONIO
      - BELLANTE GONZALO MARTIN
      - MANGO NICOLÁS ALEJANDRO
      
    - PROFESOR :
      - GODIO CLAUDIO JOSE
  version: 1.0.0
externalDocs:
  description: Figma de nuestra app
  url: https://www.figma.com/file/1Pj848jWFTFrZmwqcOSGyd/Mobile-Wireframe-UI-Kit-(Community)?type=design&node-id=428-2531&mode=design&t=gqjxIM7VssXkm32d-0
servers:
  - url: https://municipio.swagger.io/api/v1
tags:
  - name: reclamo
    description: Servicios para administrar los reclamos generados para la app para la revision de la municipalidad 
  - name: denuncia
    description: Servicios para administrar las denuncias generadas en la app de la municipalidad
  - name: promocion
    description: Servicios para administrar las promociones generadas en la app de la municipalidad
  - name: usuario
    description: Servicios para administrar los datos del usuario
  - name: rubro
    description: Servicios para administrar los reclamos generados para la app para la revision de la municipalidad 
paths:
          
  /reclamo:
    post:
      tags:
        - reclamo
      summary: Registra un nuevo reclamo
      description: Este endpoint permite registrar un nuevo reclamo sobre algun incidente en la municipalidad.
      operationId: generarReclamo
      requestBody:
        description: Crea un nuevo reclamo en la municipalidad
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reclamo'
        required: true
      responses:
        '201':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reclamo'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Reclamo'
        '400':
          description: Entrada Invalida
        '422':
          description: Validation exception
        '500':
          description: Error interno del servidor 
          
  /reclamo/filtrarPorEstado:
    get:
      tags:
        - reclamo
      summary: Busca reclamos por estado 
      description: Permite buscar reclamos por el estado 
      operationId: findClaimByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: INICIADO
            enum:
              - INICIADO
              - EN PROCESO
              - CERRADO
      responses:
        '200':
          description: Operaciton exitosa 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reclamo'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reclamo'
        '400':
          description: Entrada Invalida 
        '500':
          description: Error interno del servidor 
          
  /reclamo/filtrarPorRubro:
    get:
      tags:
        - reclamo
      summary: Busca reclamo por rubro
      description: Multipes tipos de reclamos puede ser provistos para realizar busqueda.
      operationId: findPetsByTags
      parameters:
        - name: rubro
          in: query
          description: Filtrar por rubro
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Operacion exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reclamo'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reclamo'
        '204':
          description: Contenido inexistente
        '400':
          description: Valor invalido de Rubro
          
  /reclamo/{IdReclamo}:
    put:
      tags:
        - reclamo
      summary: Actualiza un reclamo existe
      description: Actualiza una reclamo mediante un Id ingresado
      operationId: actualizarReclamo
      parameters:
        - name: IdReclamo
          in: path
          description: ID del reclamo
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Actualiza una reclamo existente 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reclamo'
        required: true
      responses:
        '200':
          description: Operacion Exitosa
        '400':
          description: ID invalido ingresado
        '404':
          description: Denuncia inexistente
        '422':
          description: Validation exception
    get:
      tags:
        - reclamo
      summary: Busca reclamo por id
      description: Retorna un unico Reclamo
      operationId: consultarPorIdReclamo
      parameters:
        - name: IdReclamo
          in: path
          description: ID del reclamo
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reclamo'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Reclamo'
        '400':
          description: ID ingresado invalido
        '404':
          description: Reclamo inexistente
    delete:
      tags:
        - reclamo
      summary: Elimina un reclamo
      description: Borra un unico reclamo del sistema  
      operationId: borrarReclamo
      parameters:
        - name: IdReclamo
          in: path
          description: ID del reclamo a eliminar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion exitosa
        '204':
          description: No content
          
  /denuncia:
    post:
      tags:
        - denuncia
      summary: Genera una denuncia en el sistema
      description: Permite generar una nueva denuncia a un comercio/vecino del municipo
      operationId: generarDenuncia
      requestBody:
        description: Crea una nueva denuncia en la municipalidad
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Denuncia'
        required: true
      responses:
        '200':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Denuncia'          
        '400':
          description: Entrada Invalida
        '422':
          description: Validation exception
        '500':
          description: Error interno del servidor 
          
  /denuncia/{idDenuncia}:
    get:
      tags:
        - denuncia
      summary: Busca una denuncia puntual por idDenuncia
      description: En base al idDenuncia busca e informa la denuncia cargada en el sistema
      operationId: buscarPorIdDenuncia
      parameters:
        - name: idDenuncia
          in: path
          description: ID de la denuncia a consultar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Denuncia'          
        '400':
          description: ID Denuncia invalido
        '404':
          description: Denuncia inexistente
    put:
      tags:
        - denuncia
      summary: Actualizo una denuncia puntual por idDenuncia
      description: En base al userId informado busca las denuncias generadas 
      operationId: modificarPorDenunciaId
      parameters:
        - name: idDenuncia
          in: path
          description: ID de la denuncia para actualizar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion exitosa
        '400':
          description: ID invalido
        '404':
          description: Denuncia inexistente
        '422':
          description: Validation exception
    delete:
      tags:
        - denuncia
      summary: Elimina una denuncia por ID
      description: Elimina de la base de datos una denuncia utilizando como parametro de entrada el id denuncia
      operationId: borrarDenuncia
      parameters:
        - name: idDenuncia
          in: path
          description: ID de la denuncia que se va eliminar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: ID Denuncia invalido
        '404':
          description: Denuncia inexistente
          
  /denuncia/buscarDenunciasGeneradas/{userId}:
    get:
      tags:
        - denuncia
      summary: Busca las denuncias generadas por un usuario
      description: En base al userId informado busca las denuncias generadas 
      operationId: buscarDenunciaGeneradasPorUserID
      parameters:
        - name: userId
          in: path
          description: ID del usuario que se desea buscar las denuncia
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Denuncia'          
        '204':
          description: Usuario sin denuncias cargadas
        '400':
          description: ID Usuario invalido
        
  /denuncia/buscarDenunciasVinculadas/{userId}:
    get:
      tags:
        - denuncia
      summary: Busca las denuncias que se le hicieron a un vecino/comercio
      description: En base al userId informado busca las denuncias que se le hicieron 
      operationId: getOrderByDenouncedId
      parameters:
        - name: userId
          in: path
          description: ID del usuario que se desea buscar las denuncia
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Denuncia'    
        '204':
          description: Usuario sin denuncias cargadas
        '400':
          description: ID Usuario invalido

  /promocion:
    post:
      tags:
        - promocion
      summary: Genera una promocion en el sistema
      description: Permite generar una nueva promocion de un comercio/vecino del municipo
      operationId: generarPromocion
      requestBody:
        description: Crea una nueva promocion en la municipalidad
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promocion'
        required: true
      responses:
        '200':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promocion'          
        '400':
          description: Entrada Invalida
        '422':
          description: Validation exception
        '500':
          description: Error interno del servidor 

  /promocion/{idPromocion}:
    get:
      tags:
        - promocion
      summary: Busca una denuncia puntual por idPromocion
      description: En base al idPromocion busca e informa la denuncia cargada en el sistema
      operationId: consutarPorIdPromocion
      parameters:
        - name: idPromocion
          in: path
          description: ID de la promocion a consultar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promocion'          
        '400':
          description: ID Promocion invalido
        '404':
          description: Promocion inexistente
    put:
      tags:
        - promocion
      summary: Actualizo una promocion puntual por idPromocion
      description: En base al userId informado busca las promociones generadas 
      operationId: actualizarPorIdPromocion
      parameters:
        - name: idPromocion
          in: path
          description: ID de la denuncia para actualizar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion exitosa
        '400':
          description: ID invalido
        '404':
          description: Promocion inexistente
        '422':
          description: Validation exception
    delete:
      tags:
        - promocion
      summary: Elimina una promocion por ID
      description: Elimina de la base de datos una promocion utilizando como parametro de entrada el id de promocion
      operationId: borrarPromocion
      parameters:
        - name: idPromocion
          in: path
          description: ID de la promocion que se va eliminar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: ID Promocion invalido
        '404':
          description: Promocion inexistente
  
  /promocion/buscarPorEstado:
    get:
      tags:
        - promocion
      summary: Busca promociones por estado 
      description: Permite buscar promociones por el estado 
      operationId: buscarPromocionPorEstado
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: VIGENTE
            enum:
              - VIGENTE
              - FINALIZADA
      responses:
        '200':
          description: Operaciton exitosa 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Promocion'          
        '400':
          description: Entrada Invalida 
        '500':
          description: Error interno del servidor 

  /usuario/solicitudAlta:
    post:
      tags:
        - usuario
      summary: Envia solicitud para crear una usuario
      description: Genera una solicitud para que la municipalidad aprueba el alta de un nuevo usuario
      operationId: solicitudAlta
      requestBody:
        description: Solicitud de usuario
        content:
          application/json:
            schema:
              type: object
              properties:
                  nombreApellido:
                    type: string
                    example: Nicolas Mango
                  dni:
                    type: string
                    example: 112223333
                  direccion:
                    type: string
                    example: Domicilio 123
      responses:
        '201':
          description: Operacion exitosa
        '500':
          description: Error interno del servidor 
    
  /usuario/generarClave:
    post:
      tags:
        - usuario
      summary: Endpoint para la creacion de la clave de usuario
      description: Permitir la generacion de clave a los usuarios habilitados por la municipalidad
      operationId: generarClave
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dni:
                  type: string
                  example: 112223333
                password:
                  type: string
                  example: password
      responses:
        '201':
          description: Operacion exitosa    
        '500':
          description: Error interno del servidor 

  /usuario/login:
    get:
      tags:
        - usuario
      summary: Logea al usuario en el sistema
      description: ''
      operationId: loginUsuario
      parameters:
        - name: usuario
          in: query
          description: Dni del usuario
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: Contraseña del usuario para ingresar al sistema
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Operacion exitosa
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
                schema:
                  type: object
                  properties:
                     token:
                      type: string
                      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDk3MzJlYTc3ODNjMzk0YzJiOTQ2MWY
        '400':
          description: Usuario/Contraseña Invalido
  /usuario/logout:
    get:
      tags:
        - usuario
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /usuario/{idUsuario}:
    get:
      tags:
        - usuario
      summary: Consultar usuario
      description: ''
      operationId: consultarusuario
      parameters:
        - name: idUsuario
          in: path
          description: 'El dni del usuario a consultar '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operacion exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'          
        '400':
          description: idUsuario invalido
        '404':
          description: Usuario inexistente
    put:
      tags:
        - usuario
      summary: Actualizar usuario
      description: Actualizar informacion del usuario
      operationId: actualizarUsuario
      parameters:
        - name: idUsuario
          in: path
          description: ID del usuario
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '200':
          description: Operacion exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'          
        '400':
          description: idUsuario invalido
        '404':
          description: Usuario inexistente
    delete:
      tags:
        - usuario
      summary: Eliminar usuario
      description: Borra un usuario del sistema
      operationId: eliminarUsuario
      parameters:
        - name: idUsuario
          in: path
          description: idUsuario a eliminar
          required: true
          schema:
            type: string
      responses:
        '400':
          description: idUsuario invalido
        '404':
          description: Usuario inexistente

  /rubro:
    post:
      tags:
        - rubro
      summary: Registra un nuevo rubro de desperfecto
      description: Este endpoint permite registrar un nuevo rubro sobre tipos de disperfectos en la municipalidad.
      operationId: generarRubro
      requestBody:
        description: Crea un nuevo rubro de desperfecto en la municipalidad
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rubro'
        required: true
      responses:
        '201':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rubro'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Rubro'
        '400':
          description: Entrada Invalida
        '422':
          description: Validation exception
        '500':
          description: Error interno del servidor 
          
  /rubro/listarPorInspector/{idInspector}:
    get:
      tags:
        - rubro
      summary: Busca rubro vinculados a un inspector 
      description: Permite buscar los rubros relacionados a un inspector 
      operationId: listarPorInspector
      parameters:
        - name: idInspector
          in: path
          description: ID del inspector
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operaciton exitosa 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rubro'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rubro'
        '400':
          description: Entrada Invalida 
        '500':
          description: Error interno del servidor 
  /rubro/{idRubro}:
    put:
      tags:
        - rubro
      summary: Actualiza un rubro existe
      description: Actualiza una rubro mediante un Id ingresado
      operationId: actualizarRubro
      parameters:
        - name: idRubro
          in: path
          description: ID del rubro
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Actualiza un rubro existente 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rubro'
        required: true
      responses:
        '200':
          description: Operacion Exitosa
        '400':
          description: ID invalido ingresado
        '404':
          description: Rubro inexistente
        '422':
          description: Validation exception
    get:
      tags:
        - rubro
      summary: Busca rubro por id
      description: Retorna un unico rubro
      operationId: consultarPorIdRubro
      parameters:
        - name: idRubro
          in: path
          description: ID del rubro
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rubro'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Rubro'
        '400':
          description: ID ingresado invalido
        '404':
          description: Rubro inexistente
    delete:
      tags:
        - rubro
      summary: Elimina un rubro
      description: Borra un unico rubro del sistema  
      operationId: borrarRubro
      parameters:
        - name: idRubro
          in: path
          description: ID del rubro a eliminar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion exitosa
        '204':
          description: No content

components:
  schemas:
    Usuario:
      type: object
      properties:
        idUsuario:
          type: integer
          format: int64
          example: 10
        nombreApellido:
          type: string
          example: Nicolas Mango
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        direccion:
          type: string
          example: '12345'
        
    Rubro: 
      required: 
        - idRubro
      type: object
      properties:
        idRubro:
          type: integer
          format: int64
          example: 31
        descripcion:
          type: string
          description: Detalle del tipo de rubro cargado en sistema
          example: ELECTRICO
        inspectores:
          type : array
          items:
             type: string
          description : Lista de inspectores habilitados para este rubro
          
    Reclamo:
      required:
        - IdVecino
      type: object
      properties:
        idReclamo:
          type: integer
          format: int64
          example: 10
        idReclamoUnificado:
          type: integer
          format: int64
          example: 10123123123
        idVecino:
          type: integer
          example: 33111222
        estado:
          type: string
          description: estado del tramite
          enum:
            - INICIADO
            - EN PROCESO
            - FINALIZADO
        direccion:
          type: object 
          properties:
            latitud:
              type: string
              description: Coordenada de Latitud del sitio con desperfecto.
              example: 4455
            longitud:
              type: string
              description: Coordenada de Longitud del sitio con desperfecto.
              example: Av.Corrientes
            calle:
              type: string
              description: Nombre de la calle donde ocurrió el desperfecto.
              example: Av.Corrientes
            numero:
              type: integer
              description: Altura donde ocurrió el desperfecto.
              example: 5609
            departamento:
              type: string
              description: Número de departamento si corresponde.
              example: 4H
            entreCalleA:
              type: string
              description: Nombre de la primer entrecalle donde ocurrió el desperfecto.
              example: Av.Corrientes
            entreCalleB:
              type: string
              description: Nombre de la segunda entrecalle donde ocurrió el desperfecto.
              example: Av.Corrientes
            codigoPostal:
              type: string
              description: Código postal del área.
              example: 1419
            localidad:
              type: string
              description: Nombre de la localidad donde ocurrió el desperfecto
              example: CABA
        desperfecto: 
          type: object 
          properties: 
            rubro:
              type: string
              description: Tipo de desperfecto reportado.
              example: ELECTRICO
            descripcion:
              type: string
              description: Descripción detallada del desperfecto.
              example: CABLE CORTADO EN LA VIA PUBLICA
        fechaInicioReclamo:
          type : string
          description: Fecha en la cual el vecino inicio el reclamo
          example: 2024-04-22
        fotosReclamo:
          type : array
          items:
             type: string
          description : Url's de las fotos del reclamo
          example: "url/imagen.jpg"
        movimientosReclamo: 
          type : array 
          items: 
             type: object 
             properties:
               idMovimiento:
                 type : integer
                 description: Id del movimiento vinculado al reclamo
                 example : 2384890
               responsable:
                 type : string
                 description: Nombre del funcionario que estuvo trabajando en el reclamo
                 example : Jorge Luis Gomez
               departamento:
                 type : string
                 description: Nombre del departamento donde estan trabajando con el reclamo
                 example : Departamento de Contabilidad 
               causa:
                  type : string
                  description: Motivo por el cual se realiza la derivacion a otra area
                  example : Se necesita la aprobacion de contabilidad
               fecha:
                  type : string
                  description: Fecha donde el funcionario realizo la derivacion
                  example : 2024-04-25
               comentarios:
                 type : array 
                 items:
                    type: string
                    description: Comentario que realizo el funcionario sobre el reclamo
                    example: "La evidencia es suficiente para iniciar los arreglos"
                    
    Denuncia:
      required:
        - IdVecino
      type: object
      properties:
        idDenuncia:
          type: integer
          format: int64
          example: 1012
        idDenunciante:
          type: integer
          example: 33111222
        idDenunciado:
          type: integer
          example: 11333222
        estado:
          type: string
          description: Estado de la denuncia
          enum:
            - INICIADO
            - EN PROCESO
            - RESUELTA
            - RECHAZADA
        aceptaResponsabilidad:
          type: string
          example: 'SI'
        direccion:
          type: object 
          properties:
            latitud:
              type: string
              description: Coordenada de Latitud del sitio con desperfecto.
              example: 4455
            longitud:
              type: string
              description: Coordenada de Longitud del sitio con desperfecto.
              example: Av.Corrientes
            calle:
              type: string
              description: Nombre de la calle donde ocurrió el desperfecto.
              example: Av.Corrientes
            numero:
              type: integer
              description: Altura donde ocurrió el desperfecto.
              example: 5609
            departamento:
              type: string
              description: Número de departamento si corresponde.
              example: 4H
            entreCalleA:
              type: string
              description: Nombre de la primer entrecalle donde ocurrió el desperfecto.
              example: Av.Corrientes
            entreCalleB:
              type: string
              description: Nombre de la segunda entrecalle donde ocurrió el desperfecto.
              example: Av.Corrientes
            codigoPostal:
              type: string
              description: Código postal del área.
              example: 1419
            localidad:
              type: string
              description: Nombre de la localidad donde ocurrió el desperfecto
              example: CABA
        descargo: 
          type: object 
          properties: 
            titulo:
              type: string
              description: Breve descripcion de la denuncia
              example: INFRACCION EN CALLE CORRIENTES 
            detalle:
              type: string
              description: Descripción detallada de la denuncia 
              example: Descripcion detallada de la denuncia realizada por el vecino.
        fechaInicioDenuncia:
          type : string
          description: Fecha en la cual el vecino inicio la denuncia
          example: 2024-04-22
        evidenciaDenuncia:
          type : array
          items:
             type: string
          description : Url's de los archivos subidos como evidencia
        comentarios:
          type : array 
          items:
             type: object
             properties:
               comentario:
                 type : string
                 description: Comentario que realizo el funcionario sobre la denuncia
                 example: "La denuncia no se puede realizar"
               fechaComentario:
                 type : string
                 description: Fecha del comentario realizado
                 example: "2024-04-05"
  
    Promocion:
      required:
        - IdVecino
      type: object
      properties:
        idPromotion:
          type: integer
          format: int64
          example: 10121
        idVecino:
          type: integer
          example: 33111222
        estado:
          type: string
          description: Estado de la publicacion
          enum:
            - VIGENTE
            - FINALIZADA
        rubro:
          type: string
          description : GASTRONOMIA
        fotosPublicacion:
          type : array
          items:
             type: string
          description : Url's de los archivos subidos como evidencia
        contacto: 
          type: object 
          properties: 
            nombreApellido:
              type: string
              description: Nombre y Apellido del usuario que realiza la publicacion
              example: Jose de San Martin
            horarioComercio:
              type: string
              description: Horario disponible para los comercios
              example: Lunes a Viernes de 12 a 20hs
            mediosContacto:
              type: array
              description : Listado de medios de contacto para el comercio
              items : 
                type: object
                properties :
                  canal: 
                    type: string
                    description: Canal para realizar el contacto
                    example : instagram
                  contacto:
                    type: string
                    description: Contato para realizar
                    example : pizzeriaJose
            direccion:
              type: object 
              properties:
                latitud:
                  type: string
                  description: Coordenada de Latitud del sitio con desperfecto.
                  example: 4455
                longitud:
                  type: string
                  description: Coordenada de Longitud del sitio con desperfecto.
                  example: Av.Corrientes
                calle:
                  type: string
                  description: Nombre de la calle donde ocurrió el desperfecto.
                  example: Av.Corrientes
                numero:
                  type: integer
                  description: Altura donde ocurrió el desperfecto.
                  example: 5609
                departamento:
                  type: string
                  description: Número de departamento si corresponde.
                  example: 4H
                entreCalleA:
                  type: string
                  description: Nombre de la primer entrecalle donde ocurrió el desperfecto.
                  example: Av.Corrientes
                entreCalleB:
                  type: string
                  description: Nombre de la segunda entrecalle donde ocurrió el desperfecto.
                  example: Av.Corrientes
                codigoPostal:
                  type: string
                  description: Código postal del área.
                  example: 1419
                localidad:
                  type: string
                  description: Nombre de la localidad donde ocurrió el desperfecto
                  example: CABA
  
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Usuario'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header