openapi: 3.0.3
info:
  title: Swagger TPO DAI - Sistema de gestion barrial - OpenAPI 3.0
  description: |-
    TPO realizado para la metria DAI
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://municipio.swagger.io/api/v3
tags:
  - name: claim
    description: Servicios para administrar los reclamos generados para la app para la revision de la municipalidad 
  - name: complaint
    description: Servicios para administrar las denuncias generadas en la app de la municipalidad
  - name: promotion
    description: Servicios para administrar las promociones generadas en la app de la municipalidad
  - name: user
    description: Operations about user
paths:
  /claim:
    put:
      tags:
        - claim
      summary: Actualiza un reclamo existe
      description: Actualiza una reclamo mediante un Id ingresado
      operationId: updateClaim
      requestBody:
        description: Actualiza una reclamo existente 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Claim'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception
    post:
      tags:
        - claim
      summary: Registra un nuevo reclamo
      description: Este endpoint permite registrar un nuevo reclamo sobre algun incidente en la municipalidad.
      operationId: addClaim
      requestBody:
        description: Crea un nuevo reclamo en la municipalidad
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Claim'
          application/xml:
            schema:
              $ref: '#/components/schemas/Claim'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Claim'
        required: true
      responses:
        '200':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Claim'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Claim'
        '400':
          description: Entrada Invalida
        '422':
          description: Validation exception
        '500':
          description: Error interno del servidor 
          
  /claim/findByStatus:
    get:
      tags:
        - claim
      summary: Busca reclamos por estado 
      description: Permite buscar reclamos por el estado 
      operationId: findClaimByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: INICIADO
            enum:
              - INICIADO
              - EN PROCESO
              - CERRADO
      responses:
        '200':
          description: Operaciton exitosa 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Claim'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Claim'
        '400':
          description: Entrada Invalida 
        '500':
          description: Error interno del servidor 
          
  /claim/findByType:
    get:
      tags:
        - claim
      summary: Busca reclamo por tipo
      description: Multipes tipos de reclamos puede ser provistos para realizar busqueda.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Claim'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Claim'
        '400':
          description: Invalid tag value
          
  /claim/{claimId}:
    get:
      tags:
        - claim
      summary: Busca reclamo por id
      description: Retorna un unico Reclamo
      operationId: getClaimById
      parameters:
        - name: claimId
          in: path
          description: ID del reclamo
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Claim'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Claim'
        '400':
          description: ID ingresado invalido
        '404':
          description: Reclamo inexistente
    delete:
      tags:
        - claim
      summary: Elimina un reclamo
      description: Borra un unico reclamo del sistema  
      operationId: deletePet
      parameters:
        - name: claimId
          in: path
          description: ID del reclamo a eliminar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion exitosa
        '204':
          description: No content
          
  /complaint:
    post:
      tags:
        - complaint
      summary: Genera una denuncia en el sistema
      description: Permite generar una nueva denuncia a un comercio/vecino del municipo
      operationId: addComplaint
      requestBody:
        description: Crea una nueva denuncia en la municipalidad
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Complaint'
        required: true
      responses:
        '200':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Complaint'          
        '400':
          description: Entrada Invalida
        '422':
          description: Validation exception
        '500':
          description: Error interno del servidor 
          
  /complaint/{complaintId}:
    get:
      tags:
        - complaint
      summary: Busca una denuncia puntual por complaintId
      description: En base al complintID busca e informa la denuncia cargada en el sistema
      operationId: getByComplaintId
      parameters:
        - name: complaintId
          in: path
          description: ID de la denuncia a consultar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Complaint'          
        '400':
          description: ID Denuncia invalido
        '404':
          description: Denuncia inexistente
    put:
      tags:
        - complaint
      summary: Actualizo una denuncia puntual por complaintId
      description: En base al userId informado busca las denuncias generadas 
      operationId: setByComplaintId
      parameters:
        - name: complaintId
          in: path
          description: ID de la denuncia para actualizar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion exitosa
        '400':
          description: ID invalido
        '404':
          description: Denuncia inexistente
        '422':
          description: Validation exception
    delete:
      tags:
        - complaint
      summary: Elimina una denuncia por ID
      description: Elimina de la base de datos una denuncia utilizando como parametro de entrada el id denuncia
      operationId: deleteOrder
      parameters:
        - name: complaintId
          in: path
          description: ID de la denuncia que se va eliminar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: ID Denuncia invalido
        '404':
          description: Denuncia inexistente
          
  /complaint/findByUserId/{userId}:
    get:
      tags:
        - complaint
      summary: Busca las denuncias generadas por un usuario
      description: En base al userId informado busca las denuncias generadas 
      operationId: getComplaintByUserId
      parameters:
        - name: userId
          in: path
          description: ID del usuario que se desea buscar las denuncia
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Complaint'          
        '204':
          description: Usuario sin denuncias cargadas
        '400':
          description: ID Usuario invalido

        
  /complaint/findByDenounced/{userId}:
    get:
      tags:
        - complaint
      summary: Busca las denuncias que se le hicieron a un vecino/comercio
      description: En base al userId informado busca las denuncias que se le hicieron 
      operationId: getOrderByDenouncedId
      parameters:
        - name: userId
          in: path
          description: ID del usuario que se desea buscar las denuncia
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Complaint'    
        '204':
          description: Usuario sin denuncias cargadas
        '400':
          description: ID Usuario invalido

  /promotion:
    post:
      tags:
        - promotion
      summary: Genera una promocion en el sistema
      description: Permite generar una nueva promocion de un comercio/vecino del municipo
      operationId: addPromotion
      requestBody:
        description: Crea una nueva promocion en la municipalidad
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotion'
        required: true
      responses:
        '200':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'          
        '400':
          description: Entrada Invalida
        '422':
          description: Validation exception
        '500':
          description: Error interno del servidor 

  /promotion/{promotionId}:
    get:
      tags:
        - promotion
      summary: Busca una denuncia puntual por complaintId
      description: En base al complintID busca e informa la denuncia cargada en el sistema
      operationId: getBypromotionId
      parameters:
        - name: promotionId
          in: path
          description: ID de la promocion a consultar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion Exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'          
        '400':
          description: ID Promocion invalido
        '404':
          description: Promocion inexistente
    put:
      tags:
        - promotion
      summary: Actualizo una promocion puntual por promotionId
      description: En base al userId informado busca las promociones generadas 
      operationId: setByPromotionId
      parameters:
        - name: promotionId
          in: path
          description: ID de la denuncia para actualizar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operacion exitosa
        '400':
          description: ID invalido
        '404':
          description: Promocion inexistente
        '422':
          description: Validation exception
    delete:
      tags:
        - promotion
      summary: Elimina una promocion por ID
      description: Elimina de la base de datos una promocionutilizando como parametro de entrada el id de promocion
      operationId: deletePromotion
      parameters:
        - name: promotionId
          in: path
          description: ID de la promocion que se va eliminar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: ID Promocion invalido
        '404':
          description: Promocion inexistente
  
  /promotion/findByStatus:
    get:
      tags:
        - promotion
      summary: Busca promociones por estado 
      description: Permite buscar promociones por el estado 
      operationId: findPromotionByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: VIGENTE
            enum:
              - VIGENTE
              - FINALIZADA
      responses:
        '200':
          description: Operaciton exitosa 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Promotion'          
        '400':
          description: Entrada Invalida 
        '500':
          description: Error interno del servidor 

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Claim:
      required:
        - IdVecino
      type: object
      properties:
        idClaim:
          type: integer
          format: int64
          example: 10
        idVecino:
          type: integer
          example: 33111222
        status:
          type: string
          description: estado del tramite
          enum:
            - INICIADO
            - EN PROCESO
            - FINALIZADO
        direccion:
          type: object 
          properties:
            nombreCalle:
              type: string
              description: Nombre de la calle donde ocurrió el desperfecto.
              example: Av.Corrientes
            altura:
              type: integer
              description: Altura donde ocurrió el desperfecto.
              example: 5609
            departamento:
              type: string
              description: Número de departamento si corresponde.
              example: 4H
            codigoPostal:
              type: string
              description: Código postal del área.
              example: 1419
            localidad:
              type: string
              description: Nombre de la localidad donde ocurrió el desperfecto
              example: CABA
        desperfecto: 
          type: object 
          properties: 
            tipo:
              type: string
              description: Tipo de desperfecto reportado.
              example: ELECTRICO
            descripcion:
              type: string
              description: Descripción detallada del desperfecto.
              example: CABLE CORTADO EN LA VIA PUBLICA
        fechaInicioReclamo:
          type : string
          description: Fecha en la cual el vecino inicio el reclamo
          example: 2024-04-22
        fotosReclamo:
          type : array
          items:
             type: string
          description : Url's de las fotos del reclamo
        derivaciones: 
          type : array 
          items: 
             type: object 
             properties:
               idFuncionario:
                 type : integer
                 description: Id del funcionario que estuvo trabajando en el reclamo
                 example : 2384890
               nombreFuncionario:
                 type : string
                 description: Nombre del funcionario que estuvo trabajando en el reclamo
                 example : Jorge Luis Gomez
               departamento:
                 type : string
                 description: Nombre del departamento donde estan trabajando con el reclamo
                 example : Departamento de Contabilidad 
               motivoDerivacion:
                  type : string
                  description: Motivo por el cual se realiza la derivacion a otra area
                  example : Se necesita la aprobacion de contabilidad
               fechaDerivacion:
                  type : string
                  description: Fecha donde el funcionario realizo la derivacion
                  example : 2024-04-25
               comentarios:
                 type : array 
                 items:
                    type: string
                    description: Comentario que realizo el funcionario sobre el reclamo
    Complaint:
      required:
        - IdVecino
      type: object
      properties:
        idComplaint:
          type: integer
          format: int64
          example: 1012
        idDenunciante:
          type: integer
          example: 33111222
        idDenunciado:
          type: integer
          example: 11333222
        status:
          type: string
          description: Estado de la denuncia
          enum:
            - INICIADO
            - EN PROCESO
            - RESUELTA
            - RECHAZADA
        descargo: 
          type: object 
          properties: 
            titulo:
              type: string
              description: Breve descripcion de la denuncia
              example: INFRACCION EN CALLE CORRIENTES 
            detalle:
              type: string
              description: Descripción detallada de la denuncia 
              example: Descripcion detallada de la denuncia realizada por el vecino.
        fechaInicioDenuncia:
          type : string
          description: Fecha en la cual el vecino inicio la denuncia
          example: 2024-04-22
        evidenciaDenuncia:
          type : array
          items:
             type: string
          description : Url's de los archivos subidos como evidencia
        comentarios:
          type : array 
          items:
             type: object
             properties:
               comentario:
                 type : string
                 description: Comentario que realizo el funcionario sobre la denuncia
               fechaComentario:
                 type : string
                 description: Fecha del comentario realizado
  
    Promotion:
      required:
        - IdVecino
      type: object
      properties:
        idPromotion:
          type: integer
          format: int64
          example: 10121
        idVecino:
          type: integer
          example: 33111222
        estado:
          type: string
          description: Estado de la publicacion
          enum:
            - VIGENTE
            - FINALIZADA
        rubro:
          type: string
          description : GASTRONOMIA
        fotosPublicacion:
          type : array
          items:
             type: string
          description : Url's de los archivos subidos como evidencia
        contacto: 
          type: object 
          properties: 
            nombreApellido:
              type: string
              description: Nombre y Apellido del usuario que realiza la publicacion
              example: Jose de San Martin
            horarioComercio:
              type: string
              description: Horario disponible para los comercios
              example: Lunes a Viernes de 12 a 20hs
            mediosContacto:
              type: array
              description : Listado de medios de contacto para el comercio
              items : 
                type: object
                properties :
                  canal: 
                    type: string
                    description: Canal para realizar el contacto
                    example : instagram
                  contacto:
                    type: string
                    description: Contato para realizar
                    example : pizzeriaJose
            direccion:
              type: object 
              properties:
                nombreCalle:
                  type: string
                  description: Nombre de la calle donde ocurrió el desperfecto.
                  example: Av.Corrientes
                altura:
                  type: integer
                  description: Altura donde ocurrió el desperfecto.
                  example: 5609
                departamento:
                  type: string
                  description: Número de departamento si corresponde.
                  example: 4H
                codigoPostal:
                  type: string
                  description: Código postal del área.
                  example: 1419
                localidad:
                  type: string
                  description: Nombre de la localidad donde ocurrió el desperfecto
                  example: CABA
  
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header